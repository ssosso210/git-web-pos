<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<aop:aspectj-autoproxy /><!-- Annotation을 이용한 AOP 구현 설정 -->
		
	
	
	<!-- DataSource (Connection Pool) Bean Configuration -->
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/dobbyposMysql" /> 
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/dobbyposOracle" /> -->
		
	
	<!--  JDBC Template Bean Configuration -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
		
	<!-- new SqlSessionFactoryBean().getObject()을 호출해서 SqlSessionFactory 객체 만들기 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" /> 
		<!-- <property name="configLocation" value="classpath:mybatis-oracle-config.xml" /> -->
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- MapperFactoryBean은 FactoryBean 인터페이스 구현한 클래스 -->
	<bean id="hqMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.HqMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />		
	</bean>
	
	<!-- Transaction Related Beans Configuration --><!-- 스프링이 제공하는 트랜잭션 관리기 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="txTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="txManager" />
	</bean>
	
	<context:component-scan base-package="com.dobbypos.model" />
	<context:component-scan base-package="com.dobbypos.aop" />
	

	
	<!-- MapperFactoryBean은 FactoryBean 인터페이스 구현한 클래스 -->
	<!-- 그러므로  MemberMapper memberMapper = new MapperFactoryBean().getObject() -->
<!-- 	<bean id="memberMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.MemberMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
	

	<bean id="employeeMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.EmployeeMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="tableMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.TableMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="checkMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.CheckMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	

	<bean id="menuMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.MenuMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="saleMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.SaleMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="customerMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.CustomerMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="storeMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.StoreMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="attendanceMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.AttendanceMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="stockMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.StockMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="clientMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.ClientMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="payMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.PayMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	
	<!-- <bean id="uploadMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.dobbypos.model.mapper.UploadMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean> -->
	
	<context:component-scan base-package="com.dobbypos.model" />
	<!-- <context:component-scan base-package="com.mvcdemoweb.aop" /> -->
	
	<!-- aop에서 처리  -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes  >
			<tx:method name="*Tx" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="within(*..*Controller)" id="txPointcut"/>
		<!-- 아래 설정은 com.mvcdemoweb.aop.TransactionAspect 클래스의 구현으로 대체 -->
		<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" /> -->
	</aop:config>
	
</beans>
